{
	"info": {
		"_postman_id": "ae8015bc-3cd7-4515-9456-1b167ec300c8",
		"name": "users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"firstName\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"lastName\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"        \"type\": \"number\"\r",
							"    }, \r",
							"    \"id\": {\r",
							"        \"type\": \"number\"\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    pm.environment.set(\"id\", jsonData.id);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"age\": {{$randomInt}}\r\n}"
				},
				"url": {
					"raw": "{{host}}/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/users/{{id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"firstName\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"lastName\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"        \"type\": \"number\"\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Check values', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstName).to.eql(\"John\");\r",
							"    pm.expect(jsonData.lastName).to.eql(\"Doe\");\r",
							"    pm.expect(jsonData.age).to.eql(32);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"age\": 32\r\n}"
				},
				"url": {
					"raw": "{{host}}/users/{{id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check repsonse', function () {\r",
							"    const deletedId = pm.environment.get('id');\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.deleted).to.eql(deletedId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/users/{{id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}